module alchitryTop (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usbRx,            // USB->Serial input
    output usbTx,           // USB->Serial output
    output ioLed[3][8],     // LEDs on IO Shield
    output ioSeg[8],        // 7-segment LEDs on IO Shield
    output ioSel[4],        // Digit select on IO Shield
    input ioButton[5],      // 5 buttons on IO Shield
    input ioDip[3][8]       // DIP switches on IO Shield
) {
    
    sig rst                 // reset signal
    
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        resetConditioner resetCond
        .rst(rst){
            multiSevenSeg seg(#DIV(3)) // 3 for simulation, 16 for hardware
        }
    }
    binToDec binToDecOriginal(#DIGITS(4))
    binToDecV1 binToDecV1(#DIGITS(4))
    
    always {
        resetCond.in = ~rst_n  // input raw inverted reset signal
        rst = resetCond.out    // conditioned reset
        
        led = 8h00             // turn LEDs off
        
        usbTx = usbRx          // loop serial port
        
        binToDecOriginal.value = 4b0101
        binToDecV1.value = 4b0111
        
        seg.values={4d4,4d3,4d2,4d1}
        
        ioLed = 3x{{8h00}}
        
        if (ioDip[0][0]){
            seg.values = binToDecOriginal.digits
            ioLed[0] = binToDecOriginal.digits[0]
            ioLed[1] = binToDecOriginal.digits[1]
            ioLed[2] = binToDecOriginal.digits[2]
        }
        
        if (ioDip[0][1]){
            seg.values = binToDecV1.digits
            ioLed[0] = binToDecV1.digits[0]
            ioLed[1] = binToDecV1.digits[1]
            ioLed[2] = binToDecV1.digits[2]
        }
        
        
        ioSeg = ~seg.seg
        ioSel = ~seg.sel
    }
}