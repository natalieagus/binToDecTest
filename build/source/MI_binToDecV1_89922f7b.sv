/*
    This file was generated automatically by Alchitry Labs 2.0.12-PREVIEW.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
/*
  Parameters:
      DIGITS = signed {00000000000000000000000000000100} : 4
      LEADING_ZEROS = signed {00000000000000000000000000000000} : 0
*/
module MI_binToDecV1_89922f7b (
    input [13:0] P_value,
    output reg [15:0] P_digits
  );
  localparam P_DIGITS = 32'sh4;
  localparam P_LEADING_ZEROS = 32'sh0;
  
  
  reg [13:0] scale;
  reg [13:0] remainder;
  reg [13:0] sub_value;
  reg blank;
  reg [32:0] R_46db9a33_i, RR_46db9a33_i;
  reg [32:0] R_4f0895bc_j, RR_4f0895bc_j;
  reg [4:0] R_4221d9fb_i, RR_4221d9fb_i;
  
  
  always @* begin
    for (RR_46db9a33_i = 0; RR_46db9a33_i < 4; RR_46db9a33_i = RR_46db9a33_i + 1) begin
      R_46db9a33_i = (0) + RR_46db9a33_i * (1);
      P_digits[(R_46db9a33_i)*4+3-:4] = 4'hb;
    end
    remainder = P_value;
    blank = !$signed(P_LEADING_ZEROS);
    scale = 1'h0;
    sub_value = 1'h0;
    if (P_value < ((4'ha) ** ($signed(P_DIGITS)))) begin
      for (RR_4f0895bc_j = 0; RR_4f0895bc_j < 4; RR_4f0895bc_j = RR_4f0895bc_j + 1) begin
        R_4f0895bc_j = ($signed(P_DIGITS) - 1'h1) + RR_4f0895bc_j * (-2'sh1);
        scale = ((4'ha) ** (R_4f0895bc_j));
        if (remainder < scale) begin
          if (R_4f0895bc_j != 1'h0 && blank) begin
            P_digits[(R_4f0895bc_j)*4+3-:4] = 4'ha;
          end else begin
            P_digits[(R_4f0895bc_j)*4+3-:4] = 1'h0;
          end
        end else begin
          blank = 1'h0;
          sub_value = 1'h0;
          for (RR_4221d9fb_i = 0; RR_4221d9fb_i < 9; RR_4221d9fb_i = RR_4221d9fb_i + 1) begin
            R_4221d9fb_i = (4'h9) + RR_4221d9fb_i * (-2'sh1);
            if (remainder < (R_4221d9fb_i + 1'h1) * scale) begin
              P_digits[(R_4f0895bc_j)*4+3-:4] = R_4221d9fb_i;
              sub_value = R_4221d9fb_i * scale;
            end
          end
          remainder = remainder - sub_value;
        end
      end
    end
  end
  
endmodule