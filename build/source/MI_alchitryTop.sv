/*
    This file was generated automatically by Alchitry Labs 2.0.12-PREVIEW.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module MI_alchitryTop (
    input P_clk,
    input P_rst_n,
    output reg [7:0] P_led,
    input P_usbRx,
    output reg P_usbTx,
    output reg [23:0] P_ioLed,
    output reg [7:0] P_ioSeg,
    output reg [3:0] P_ioSel,
    input [4:0] P_ioButton,
    input [23:0] P_ioDip
  );
  
  
  reg rst;
  
  reg M_resetCond_in;
  wire M_resetCond_out;
  MI_resetConditioner_7ee16669 resetCond (
    .P_clk(P_clk),
    .P_in(M_resetCond_in),
    .P_out(M_resetCond_out)
  );
  reg [15:0] M_seg_values;
  wire [6:0] M_seg_seg;
  wire [3:0] M_seg_sel;
  MI_multiSevenSeg_70303e7f seg (
    .P_clk(P_clk),
    .P_rst(rst),
    .P_values(M_seg_values),
    .P_seg(M_seg_seg),
    .P_sel(M_seg_sel)
  );
  reg [13:0] M_binToDecOriginal_value;
  wire [15:0] M_binToDecOriginal_digits;
  MI_binToDec_258523be binToDecOriginal (
    .P_value(M_binToDecOriginal_value),
    .P_digits(M_binToDecOriginal_digits)
  );
  reg [13:0] M_binToDecV1_value;
  wire [15:0] M_binToDecV1_digits;
  MI_binToDecV1_258523be binToDecV1 (
    .P_value(M_binToDecV1_value),
    .P_digits(M_binToDecV1_digits)
  );
  
  always @* begin
    M_resetCond_in = ~P_rst_n;
    rst = M_resetCond_out;
    P_led = 8'h0;
    P_usbTx = P_usbRx;
    M_binToDecOriginal_value = 4'h5;
    M_binToDecV1_value = 4'h7;
    M_seg_values = 16'h4321;
    P_ioLed = 24'h0;
    if (P_ioDip[(1'h0)*8+(1'h0)]) begin
      M_seg_values = M_binToDecOriginal_digits;
      P_ioLed[(1'h0)*8+7-:8] = M_binToDecOriginal_digits[(1'h0)*4+3-:4];
      P_ioLed[(1'h1)*8+7-:8] = M_binToDecOriginal_digits[(1'h1)*4+3-:4];
      P_ioLed[(2'h2)*8+7-:8] = M_binToDecOriginal_digits[(2'h2)*4+3-:4];
    end
    if (P_ioDip[(1'h0)*8+(1'h1)]) begin
      M_seg_values = M_binToDecV1_digits;
      P_ioLed[(1'h0)*8+7-:8] = M_binToDecV1_digits[(1'h0)*4+3-:4];
      P_ioLed[(1'h1)*8+7-:8] = M_binToDecV1_digits[(1'h1)*4+3-:4];
      P_ioLed[(2'h2)*8+7-:8] = M_binToDecV1_digits[(2'h2)*4+3-:4];
    end
    P_ioSeg = ~M_seg_seg;
    P_ioSel = ~M_seg_sel;
  end
  
endmodule